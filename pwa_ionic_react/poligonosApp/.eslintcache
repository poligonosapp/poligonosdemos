[{"E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\index.js":"1","E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\reportWebVitals.js":"2","E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\App.tsx":"3","E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\pages\\Tab1.tsx":"4","E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\pages\\Tab2.tsx":"5","E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\pages\\Tab3.tsx":"6","E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\UsingWorkbox.js":"7","E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\serviceWorker.js":"8"},{"size":2166,"mtime":1610590919870,"results":"9","hashOfConfig":"10"},{"size":539,"mtime":1610496963984,"results":"11","hashOfConfig":"10"},{"size":2770,"mtime":1610570819814,"results":"12","hashOfConfig":"10"},{"size":1546,"mtime":1610497035724,"results":"13","hashOfConfig":"10"},{"size":834,"mtime":1610496963969,"results":"14","hashOfConfig":"10"},{"size":768,"mtime":1610496963984,"results":"15","hashOfConfig":"10"},{"size":2361,"mtime":1610536793847,"results":"16","hashOfConfig":"10"},{"size":6023,"mtime":1610536830118,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1g3e0py",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\index.js",[],[],"E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\reportWebVitals.js",[],"E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\App.tsx",[],"E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\pages\\Tab1.tsx",[],"E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\pages\\Tab2.tsx",[],[],"E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\pages\\Tab3.tsx",[],"E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\UsingWorkbox.js",[],[],"E:\\Users\\luism\\poligonosdemos\\pwa_ionic_react\\poligonosApp\\src\\serviceWorker.js",["38"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n",{"ruleId":null,"fatal":true,"severity":2,"message":"39","line":25,"column":5},"Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 23 | \u001b[39mtype \u001b[33mConfig\u001b[39m \u001b[33m=\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 24 | \u001b[39m    onSuccess\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m (registration\u001b[33m:\u001b[39m \u001b[33mServiceWorkerRegistration\u001b[39m) \u001b[33m=>\u001b[39m \u001b[36mvoid\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 25 | \u001b[39m    onUpdate\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m (registration\u001b[33m:\u001b[39m \u001b[33mServiceWorkerRegistration\u001b[39m) \u001b[33m=>\u001b[39m \u001b[36mvoid\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 26 | \u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m 27 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 | \u001b[39m\u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m register(config\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mConfig\u001b[39m) {\u001b[0m"]